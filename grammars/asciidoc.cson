'name': 'AsciiDoc'
'scopeName': 'source.asciidoc'
'fileTypes': [
  'ad'
  'asc'
  'adoc'
  'asciidoc'
]

'patterns': [

  # Includes inline patterns, see repository section below.
  {
    'include': '#inline'
  }

  # Includes AsciiDoc and Markdown style code blocks, see repository section
  # below.
  {
    'include': '#codeBlocks'
  }

  # Matches section titles (headers)
  #
  # Examples
  #
  #   = Document Title (Level 0)
  #
  #   == Level 1 Section
  #
  #   === Level 2 Section
  {
    'begin': '^={1,6}\\p{Blank}+'
    'end': '$'
    'name': 'markup.heading.asciidoc'
    'patterns': [
      'include': '$self'
    ]
  }

  # Matches block titles
  #
  # Examples
  #
  # .An example example
  # ========================
  # This is an example.
  # ========================
  #
  {
    'begin': '^\\.(\\w[\\w ]*\\w)'
    'end': '$'
    'captures':
      '1': 'name': 'markup.heading.blocktitle.asciidoc'
  }

  # Matches attributes
  #
  # Examples
  #
  #   :icons: font
  #   :sectanchors:
  {
    'match': '(\\:)([^\/\\:\\s]+)(\\:)(\\s+\\S+)?$'
    'name': 'support.constant.asciidoc'
    'captures':
      '4': 'name': 'variable.asciidoc'
  }

  # Matches block comments
  #
  # Examples
  #
  #   ////
  #   A multi-line comment.
  #
  #   Notice it's a delimited block.
  #   ////
  {
    'begin': '(^/{4,}$)'
    'end': '\\1'
    'name': 'comment.block.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches example block
  #
  # Examples
  #
  #   ====
  #   A multi-line example.
  #
  #   Notice it's a delimited block.
  #   ====
  {
    'begin': '^(={4,})+?$'
    'end': '\\1'
    'name': 'markup.block.example.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches sidebar block
  #
  # Examples
  #
  # ***********************************
  # As an aside, I love Asciidoc
  # ***********************************
  {
    'begin': '(^\\*{4,}$)'
    'end': '\\1'
    'name': 'markup.block.sidebar.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches literal block
  #
  # Examples
  #
  # ...................................
  # Daleks EXTERMINATE in monospace!
  # ...................................
  {
    'begin': '(^\\.{4,}$)'
    'end': '\\1'
    'name': 'markup.block.literal.asciidoc'
    'patterns': [
      { 'include': [ '#inline', '#codeBlocks'] }
    ]
  }

  # Matches passthrough block
  #
  # Examples
  #
  # +++++++++++++++++++++++++++++++++++
  # <s>Could be struck through</s>
  # +++++++++++++++++++++++++++++++++++
  {
    'begin': '(^\\+{4,}$)'
    'end': '\\1'
    'name': 'markup.block.passthrough.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches quote declaration
  #
  # Examples
  #
  # [quote]
  # ____________________________________________________________________
  # Huh?
  # ____________________________________________________________________
  #
  # [quote, Homer Simpson]
  # ____________________________________________________________________
  # D'oh!
  # ____________________________________________________________________
  #
  # [quote, Erwin Schr√∂dinger, Sorry]
  # ____________________________________________________________________
  # I don't like it, and I'm sorry I ever had anything to do with it.
  # ____________________________________________________________________
  {
    'begin': '^\\[(quote|verse)(, ([\\w ]+))?(, ([\\w ]+))?'
    'end': '\\]$'
    'beginCaptures':
      '1': 'name': 'markup.quote.declaration.asciidoc'
      '3': 'name': 'markup.quote.attribution.asciidoc'
      '5': 'name': 'markup.quote.citation.asciidoc'
  }

  # Matches quote block
  {
    'begin': '(^_{4,}$)'
    'end': '\\1'
    'name': 'markup.quote.block.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches admonition blocks
  #
  # Examples
  #
  #   TIP: Pro tip...
  #
  #   IMPORTANT: Don't forget...
  {
    'begin': '^((NOTE|TIP|IMPORTANT|WARNING|CAUTION)\\:)\\p{Blank}+'
    'end': '$'
    'name': 'markup.admonition.asciidoc'
    'captures':
      '1': 'name': 'support.constant.asciidoc'
    'patterns': [
      { 'include': '#inline' }
    ]
  }

  # Matches explicit paragraph styles
  #
  # Examples
  #
  #   [normal]
  #   This is a normal paragraph.
  {
    'match': '^\\[((normal|literal|listing|TIP|NOTE|IMPORTANT|WARNING|CAUTION|partintro|comment|example|sidebar|source|music|latex|graphviz))\\]$'
    'name': 'markup.explicit.asciidoc'
    'captures':
      '1': 'name': 'support.constant.asciidoc'
  }

  # Matches section templates
  #
  # Examples
  #
  #   [appendix]
  #   This is an appendix.
  {
    'match': '^\\[((sect[1-4]|abstract|preface|colophon|dedication|glossary|bibliography|synopsis|appendix|index))\\]$'
    'name': 'markup.section.asciidoc'
    'captures':
      '1': 'name': 'support.constant.asciidoc'
  }

  # Matches tables. Supports cell spans, alignments and styles.
  #
  # Examples
  #
  #   |===
  #   |Name |Purpose |Substitution
  #
  #   h|comment
  #   a|Private notes that are not displayed in the output
  #   |none
  #
  #   h|literal
  #   |Output text to be displayed exactly as entered
  #   |verbatim
  #   |===
  {
    'begin': '^(\\|={3,}\\s*)$'
    'beginCaptures':
      '0': 'name': 'support.table.asciidoc'
    'end': '^\\1$'
    'endCaptures':
      '0': 'name': 'support.table.asciidoc'
    'patterns': [
      # Match non-escaped vertical column delimiters
      {
        # Regex groups:
        #   1 - matches beginning of the line or a whitespace to separate a
        #       column from the previous one.
        #   2 - matches cell specs (spans, alignments, styles, etc.)
        #   3 - matches the vertical bar.
        #   4 - negative lookahead prevents highlighting of several vertical
        #       bars followed in a row and triple equal signs that can close the
        #       table (triple equal sign is the issue only for unit tests)
        'match': '(^|\\s+)([^\\|\\s\\\\]*)(\\|)(?!={3,}|\\|)'
        'captures':
          '2': 'name': 'support.table.spec.asciidoc'
          '3': 'name': 'support.table.asciidoc'
      }
      { 'include': '#inline' }
    ]
  }

  # Matches ordered and unordered list items
  #
  # Examples
  #
  #   * level 1
  #   ** level 2
  #   *** level 3
  #
  #   . level 1
  #   .. level 2
  #   ... level 3
  {
    'match': '^\\s*([\\*\\-\\.]{1,5})[ \\t]+'
    'name': 'markup.list.asciidoc'
    'captures':
      '1': 'name': 'markup.list.bullet.asciidoc'
  }
]

'repository':
  'inline':
    'patterns': [

      # Matches bold pharses
      #
      # Examples
      #
      #   *bold phrase*
      {
        'match': '(?<=^|\\s)(\\*[^\\*]+\\*)'
        'captures':
          '0': 'name': 'markup.bold.asciidoc'
      }

      # Matches italic pharses
      #
      # Examples
      #
      #   _italic phrase_
      {
        'match': '(?<=^|\\s)(_[^_]+_)'
        'captures':
          '0': 'name': 'markup.italic.asciidoc'
      }

      # Matches substitutions
      #
      # Examples
      #
      #   Check out {docslink} too!
      #
      #   {checkedbox} That's done!
      {
        'match': '({)([^\/\\:\\s]+)(})'
        'name': 'markup.substitution.asciidoc'
      }

      # Matches block ID elements
      #
      # Example: [[section-title]]
      {
        'match': '(?<=^|\\s)(\\[{2}([^\\[\\]]+)\\]{2})'
        'captures':
          '0': 'name': 'markup.blockid.asciidoc'
      }

      # Matches reference elements
      #
      # Example: <<section-ref>>
      {
        'match': '(?<=^|\\s)(\\<{2}([^\\<\\>]+)\\>{2})'
        'captures':
          '0': 'name': 'markup.reference.asciidoc'
      }

      # Matches raw inlines
      #
      # Examples
      #
      #   `Text in {backticks}` renders exactly as entered, in `monospace`.
      {
        'match': '`[^`]+`'
        'name': 'markup.raw.inline.asciidoc'
      }

      # Matches HTML entities
      #
      # Examples
      #
      #   Dungeons &amp; Dragons
      {
        'match': '(\&)(.+?)(;)'
        'name': 'markup.htmlentity.asciidoc'
        'captures':
          '1': 'name': 'support.constant.asciidoc'
          '3': 'name': 'support.constant.asciidoc'
      }

      # Matches inline macros
      #
      # Examples
      #
      #   http://www.docbook.org/[DocBook.org]
      {
        'match': '([^\:]+\:)(.+?)(\\[)([^\\]]*?)(\\])'
        'name': 'markup.macro.inline.asciidoc'
        'captures':
          '1': 'name': 'support.constant.asciidoc'
          '3': 'name': 'support.constant.asciidoc'
          '5': 'name': 'support.constant.asciidoc'
      }
    ]

  'codeBlocks':
    'patterns': [

      ##########################################################################
      #                                                                        #
      #                       AsciiDoc Style Code Blocks                       #
      #                                                                        #
      ##########################################################################

      # Matches JavaScript AsciiDoc code blocks
      #
      # Examples
      #
      #   [source,js]
      #   ----
      #   var http = require('http');
      #   http.createServer(function (req, res) {
      #     res.end('Hello World\n');
      #   }).listen(1337, '127.0.0.1');
      #   ----
      {
        'begin': '^\\[source,\\s*(javascript|js)\\]$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^\\s*$'
        'patterns': [
          {
            'begin': '(^\\s*-{4,}\\s*$)'
            'beginCaptures':
              '0': 'name': 'support.asciidoc'
            'end': '\\1'
            'endCaptures':
              '0': 'name': 'support.asciidoc'
            'patterns': ['include': 'source.js']
          }
        ]
      }

      # Matches Ruby AsciiDoc code blocks
      #
      # Examples
      #
      #   [source,ruby]
      #   ----
      #   require 'sinatra'
      #
      #   get '/hi' do
      #     "Hello World!"
      #   end
      #   ----
      {
        'begin': '^\\[source,\\s*(ruby|rb)\\]$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^\\s*$'
        'patterns': [
          {
            'begin': '(^\\s*-{4,}\\s*$)'
            'beginCaptures':
              '0': 'name': 'support.asciidoc'
            'end': '\\1'
            'endCaptures':
              '0': 'name': 'support.asciidoc'
            'patterns': ['include': 'source.ruby']
          }
        ]
      }

      # Matches language-agnostic AsciiDoc code blocks
      #
      # Examples
      #
      #   [source]
      #   ----
      #   require 'sinatra'
      #
      #   get '/hi' do
      #     "Hello World!"
      #   end
      #   ----
      {
        'begin': '^\\[source(,[^\\],]*)?\\]$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^\\s*$'
        'patterns': [
          {
            'begin': '(^\\s*-{4,}\\s*$)'
            'beginCaptures':
              '0': 'name': 'support.asciidoc'
            'end': '\\1'
            'endCaptures':
              '0': 'name': 'support.asciidoc'
            'name': 'markup.raw.asciidoc'
          }
        ]
      }


      ##########################################################################
      #                                                                        #
      #                       Markdown Style Code Blocks                       #
      #                                                                        #
      ##########################################################################

      # Matches JavaScript Markdown-style code blocks
      #
      # Examples
      #
      #   [source,js]
      #   ----
      #   var http = require('http');
      #   http.createServer(function (req, res) {
      #     res.end('Hello World\n');
      #   }).listen(1337, '127.0.0.1');
      #   ----
      {
        'begin': '^`{3,}\\s*(javascript|js)\\s*$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^`{3,}$'
        'endCaptures':
          '0': 'name': 'support.asciidoc'
        'patterns': ['include': 'source.js']
      }

      # Matches Ruby Markdown-style code blocks
      #
      # Examples
      #
      #   ```ruby
      #   require 'sinatra'
      #
      #   get '/hi' do
      #     "Hello World!"
      #   end
      #   ```
      {
        'begin': '^`{3,}\\s*(ruby|rb)\\s*$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^`{3,}$'
        'endCaptures':
          '0': 'name': 'support.asciidoc'
        'patterns': ['include': 'source.ruby']
      }

      # Matches language-agnostic Markdown code blocks
      #
      # Examples
      #
      #   ```
      #   require 'sinatra'
      #
      #   get '/hi' do
      #     "Hello World!"
      #   end
      #   ```
      {
        'begin': '^`{3,}.*$'
        'beginCaptures':
          '0': 'name': 'support.asciidoc'
        'end': '^`{3,}$'
        'endCaptures':
          '0': 'name': 'support.asciidoc'
        'name': 'markup.raw.asciidoc'
      }
    ]
